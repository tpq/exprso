% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/1.3-exprso.R
\name{exprso}
\alias{exprso}
\title{The \code{exprso} Package}
\usage{
exprso(x, y, label = 1, switch = FALSE)
}
\arguments{
\item{x}{A matrix of feature data for all samples. Rows should
contain samples and columns should contain features.}

\item{y}{A vector of outcomes for all samples. If
\code{class(y) == "character"} or \code{class(y) == "factor"},
\code{exprso} prepares data for binary or multi-class classification.
Else, \code{exprso} prepares data for regression. If \code{y} is a
matrix, the program uses the outcome in \code{label}.}

\item{label}{A numeric scalar or character string. The column to
use as the label if \code{y} is a matrix.}

\item{switch}{A logical scalar. Toggles which class label is
called Control in binary classification.}
}
\value{
An \code{ExprsArray} object.
}
\description{
Welcome to the \code{exprso} package!

The \code{exprso} function imports data into the learning environment.

See \code{\link{mod}} to process the data.

See \code{\link{split}} to split off a test set.

See \code{\link{fs}} to select features.

See \code{\link{build}} to build models.

See \code{\link{pl}} to build models high-throughput.

See \code{\link{pipe}} to process pipelines.

See \code{\link{buildEnsemble}} to build ensembles.

See \code{\link{exprso-predict}} to deploy models.

See \code{\link{conjoin}} to merge objects.
}
\examples{
library(exprso)
data(iris)
array <- exprso(iris[,1:4], iris[,5])
arrays <- splitSample(array, percent.include = 67)
train <- trainingSet(arrays)
test <- testSet(arrays)
train <- fsANOVA(train, top = 0)
train <- fsPrcomp(train, top = 3)
mach <- buildSVM(train, top = 5, kernel = "linear", cost = 1)
pred <- predict(mach, test)
calcStats(pred)
}
